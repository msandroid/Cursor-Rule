name: Fluid PR Review

on:
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      pr_number:
        description: "PR number to review"
        required: true
        type: number

jobs:
  review-pr:
    if: >
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issue_comment' && 
       github.event.issue.pull_request && 
       contains(github.event.comment.body, '/fluid review') &&
       (github.event.comment.author_association == 'OWNER' ||
        github.event.comment.author_association == 'MEMBER' ||
        github.event.comment.author_association == 'COLLABORATOR'))
    timeout-minutes: 15
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      pull-requests: write
      issues: write
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Get PR details
        id: get_pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            PR_NUMBER=${{ github.event.inputs.pr_number }}
          elif [ "${{ github.event_name }}" = "issue_comment" ]; then
            PR_NUMBER=${{ github.event.issue.number }}
          else
            PR_NUMBER=${{ github.event.pull_request.number }}
          fi

          echo "pr_number=$PR_NUMBER" >> "$GITHUB_OUTPUT"

          # Get PR details
          PR_DATA=$(gh pr view $PR_NUMBER --json title,body,additions,deletions,changedFiles,baseRefName,headRefName)
          echo "pr_data=$PR_DATA" >> "$GITHUB_OUTPUT"

          # Get file changes
          CHANGED_FILES=$(gh pr diff $PR_NUMBER --name-only)
          echo "changed_files<<EOF" >> "$GITHUB_OUTPUT"
          echo "$CHANGED_FILES" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Post initial review comment
        id: initial_comment
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Post initial "review in progress" comment
          gh pr comment ${{ steps.get_pr.outputs.pr_number }} --body "üîç **Fluid AI Review In Progress** 

          Your PR review has been queued and is currently being analyzed by Fluid AI. This should take about 1-3 minutes depending on the size of the PR.

          Please wait for the detailed review to be posted shortly..."

          echo "Posted initial review comment"

      - name: Verify GitHub CLI Setup
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Verifying GitHub CLI authentication..."
          gh auth status
          echo "Current repository: $(gh repo view --json name,owner)"
          echo "Testing PR access for PR #${{ steps.get_pr.outputs.pr_number }}..."
          gh pr view ${{ steps.get_pr.outputs.pr_number }} --json number,title,state || echo "Warning: Could not access PR details"

      - name: Configure Git
        run: |
          git config --global user.name "Fluid AI Bot"
          git config --global user.email "action@github.com"

      - name: Run Gemini PR Review
        uses: google-gemini/gemini-cli-action@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ steps.get_pr.outputs.pr_number }}
          PR_DATA: ${{ steps.get_pr.outputs.pr_data }}
          CHANGED_FILES: ${{ steps.get_pr.outputs.changed_files }}
          REPOSITORY: ${{ github.repository }}
        with:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          settings_json: |
            {
              "coreTools": [
                "run_shell_command(echo)",
                "run_shell_command(gh pr view)",
                "run_shell_command(gh pr diff)",
                "run_shell_command(gh pr review)",
                "run_shell_command(gh pr comment)",
                "run_shell_command(cat)",
                "run_shell_command(head)",
                "run_shell_command(tail)",
                "run_shell_command(grep)",
                "run_shell_command(git add)",
                "run_shell_command(git commit)",
                "run_shell_command(git push)",
                "write_file"
              ],
              "sandbox": false
            }
          prompt: |
            **Objective:** Act as Fluid AI, a senior ML engineer and Swift expert. Conduct a comprehensive, deep-dive review of a GitHub Pull Request for the FluidAudio project. Your review should be insightful, constructive, and forward-looking, identifying not just code issues but also potential architectural and performance implications.

            **Persona: Fluid AI**
            - **You are:** A meticulous, pragmatic, and mentorship-oriented senior engineer.
            - **Your expertise:** Deep knowledge of Swift, Apple development (CoreML, AVFoundation), high-performance audio processing, and applied machine learning.
            - **Your tone:** Constructive and inquisitive, not critical or accusatory. You ask clarifying questions and offer well-reasoned suggestions. You praise good work before suggesting improvements. You always consider the trade-offs between performance, readability, and maintainability.

            **Project Context: FluidAudio**
            - **Description:** A high-performance, real-time speaker diarization library for macOS and iOS.
            - **Platform:** macOS 13.0+, iOS 16.0+, optimized for Apple Silicon.
            - **Core Pipeline:** Segmentation ‚Üí Embedding ‚Üí Clustering (Hungarian algorithm).
            - **Key Features:** Real-time Factor (RTF) < 1.0x, competitive Diarization Error Rate (DER) of 17.7%, robust model-handling capabilities.

            ---

            ## **Review Workflow**

            **1. Synthesize the PR's Intent (Context Gathering)**
              - First, understand the "why" behind the PR.
              - Parse the `$PR_DATA` (JSON with title, body, stats) to grasp the author's stated goals and context.
              - Formulate a hypothesis about the PR's purpose and potential impact before diving into the code.

            **2. Analyze the Code Changes (The "What" and "How")**
              - Retrieve the full diff using `gh pr diff $PR_NUMBER`.
              - Systematically review each changed file listed in `$CHANGED_FILES`.
              - For large changes, focus on the most significant architectural shifts, API surface changes, and logic modifications.

            **3. Apply Core Review Framework (Deep Analysis)**
              - Cross-reference the changes against the checklists and knowledge bases.
              - **Internal Knowledge:** Use the `Model Assumption Investigation Checklist`, `API Documentation Investigation Template`, and `Performance Validation Framework` from `GEMINI.md`.
              - **External Knowledge:** Compare the code against modern best practices. If you have knowledge of relevant updates from WWDC 2025 (e.g., new Swift concurrency models, CoreML features), incorporate those insights.
              - **Actively Question:** Don't take anything for granted.
                - *Why was this approach chosen?*
                - *What are the unhandled edge cases?*
                - *What is missing (e.g., tests, documentation, error handling)?*

            **4. Synthesize Findings & Generate Feedback**
              - Consolidate your notes into the structured output format below.
              - Identify new, reusable insights (architectural patterns, common pitfalls, performance tips) to be documented.

            **5. Persist Learnings**
              - Update the `GEMINI.md` file by appending new insights to the "Recent Learnings" section. This is a critical step for continuous improvement. `write_file GEMINI.md "updated content"`

            ---

            ## **Core Review Directives**

            #### üî¨ Swift & Apple Platform Excellence
            - **Best Practices:** Scrutinize for modern Swift usage (async/await, structured concurrency), robust error handling (using `Result` type, specific `Error` enums), and memory safety (value vs. reference types, ARC).
            - **Apple Frameworks:** Ensure idiomatic use of Foundation, CoreML, AVFoundation, and OSLog.
            - **Performance:** Look for Apple Silicon optimizations, efficient CoreML graph usage, and potential memory bottlenecks.

            #### üß† ML & Audio Pipeline Integrity
            - **Model Assumptions:** Challenge every implicit assumption about the ML model. Does the code correctly handle the model's expected input/output shapes, data types, and value ranges?
            - **Algorithm Validation:** Is the implementation of the clustering algorithm correct and efficient? Are there numerical stability issues?
            - **Testing Gaps:** Identify missing unit tests, integration tests, or performance benchmarks for the changed code.

            #### üìñ API Design & Documentation
            - **Clarity & Usability:** Is the public API intuitive? Are function names and parameters clear? Could documentation be improved?
            - **Consistency:** Does the API design follow existing patterns within the FluidAudio library?

            ---

            ## **Critical Instructions & Constraints**

            - **GitHub CLI:**
                - **ALWAYS** use the `$PR_NUMBER` variable for all `gh` commands (e.g., `gh pr diff $PR_NUMBER`).
                - **Failure Handling:** If any `gh` command fails, explicitly state that it failed, explain the likely reason (e.g., invalid token, permissions issue), and recommend manual review steps for the user.
            - **Feedback Formatting:**
                - **MUST** prefix all file-specific feedback with `**In `path/to/filename.swift`:**`.
                - **MUST** reference specific line numbers where possible (e.g., `(line 45)`).

            ---

            ## **Output Structure**

            Generate a single, comprehensive review comment in Markdown. The body of the comment **must** follow this structure precisely:

            > **High-Level Summary**
            > A 2-3 sentence overview of the PR's quality and your recommendation (e.g., "Approved," "Requesting Changes," "Commented").
            >
            > ---
            >
            > **‚ú® Praise & What Went Well**
            > Start with positive reinforcement. Highlight specific examples of well-written code, clever solutions, or thorough testing.
            >
            > ---
            >
            > **‚ö†Ô∏è Critical Feedback & Required Changes**
            > List the essential changes required for this PR to be merged. These are non-negotiable items related to bugs, performance regressions, or significant architectural flaws.
            >
            > - **In `DiarizerManager.swift` (line 45):** [Describe the critical issue and why it must be fixed].
            > - **In `ClusteringTests.swift`:** [Describe the missing test case that is essential].
            >
            > ---
            >
            > **üí° Suggestions & Nitpicks**
            > Recommend optional improvements for code style, readability, or future-proofing. These are not blockers but would improve the quality of the codebase.
            >
            > - **In `AudioProcessor.swift` (line 102):** Consider using `async/await` here instead of a completion handler to align with modern concurrency patterns.
            > - **In `README.md`:** Suggest adding a note about...
            >
            > ---
            >
            > **‚ùì Questions**
            > Ask clarifying questions to the author where the intent is unclear or where you need more context to complete the review.
            >
            > - In `EmbeddingModel.swift`, what was the reason for choosing a stride of 10ms instead of the previous 20ms? I'm curious about the performance/accuracy trade-off here.

      - name: Delete initial review comment
        if: always()
        continue-on-error: true

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Delete the initial "review in progress" comment
          git add GEMINI.md
          git commit -m "chore: update GEMINI.md"
          git push
          gh pr comment ${{ steps.get_pr.outputs.pr_number }} --delete-last --yes
          echo "Deleted initial review comment"

---
alwaysApply: false
---
## General Guidelines

- Act as an expert AI programming assistant specialising in producing clear, readable SwiftUI code.  
- Use the latest versions of SwiftUI and Swift (December 2024) and apply up-to-date features and best practices.  
- Ensure responses are accurate, factual, and thoughtfully reasoned.  
- Follow user requirements precisely and comprehensively.  
- Approach tasks step-by-step: outline a detailed plan in pseudocode before coding.  
- Confirm your understanding of the task before writing any code.  
- Deliver code that is correct, up-to-date, bug-free, fully functional, secure, efficient, and adheres to best practices.  
- Prioritise readability over performance in code structure.  
- Implement all requested functionality completely, leaving no TODOs, placeholders, or gaps.  
- Be concise and minimise unnecessary explanations.  
- If no clear answer exists, acknowledge it. If uncertain, state so.

## Project Structure (Domain-Driven Design)

Sources/
├── App/
│   └── MainApp.swift (@main, @Observable, Scene configuration)
├── Features/ 
│   ├── Home/
│   │   ├── Views/ (Pure SwiftUI views)
│   │   └── ViewModels/ (@Observable classes, no ObservableObject)
│   └── Profile/
│       ├── Views/
│       └── ViewModels/
├── Shared/
│   ├── Components/ (Reusable views)
│   ├── Modifiers/ (ViewModifier protocols)
│   └── Styles/ (ButtonStyle, ToggleStyle, etc)
├── Models/
│   └── Domain models with @Observable and @Bindable properties for state
├── Services/
│   ├── Network/ (async/await API calls)
│   └── Persistence/ (Swift Data, CloudKit)
└── Core/
    ├── Extensions/
    ├── Utilities/
    └── Constants/

Resources/
├── Assets.xcassets/
├── Localizable.xcstrings
└── Fonts/

Tests/
├── UnitTests/
└── UITests/

## Design & Implementation Rules

1. State Management:
   - Use `@Observable` for reference types holding business logic and app state.  
   - Use `@Bindable` properties within @Observable classes so SwiftUI views can bind directly to them.  
   - Avoid `@State` for view model observation, rely on `let model: MyModel` instead.  
   - Pass dependencies via initialisers rather than as global singletons.  
   - Use `@Environment` for app-wide or large-scope states.  
   - `@State` is only for view-local state.

2. Modern Navigation:
   - Use `NavigationSplitView` for multi-column layouts on larger displays.  
   - Use `NavigationStack` with type-safe navigation for simpler or single-column apps.  
   - Use `navigationDestination()` for programmatic navigation and deep linking.

3. Layout System:
   - Use `Grid` for complex, flexible layouts.  
   - `ViewThatFits` for adaptive interfaces.  
   - Custom layouts via the `Layout` protocol.  
   - Apply `containerRelativeFrame()` for responsive sizing and positioning.  
   - Ensure Dynamic Type support in text and layouts.

4. Data & Performance:
   - Use Swift Data (`@Query`) for direct data fetching and persistence.  
   - Annotate UI-updating code paths with `@MainActor`.  
   - Use `TaskGroup` for concurrent operations.  
   - Implement lazy loading (`LazyVStack`, `LazyHGrid`) with stable, identifiable items to boost performance.

5. UI Components:
   - Use `ScrollView` with `.scrollTargetBehavior()` for a better scrolling experience.  
   - Employ `.contentMargins()` for consistent internal spacing.  
   - Apply `.containerShape()` to customise hit testing areas.  
   - Use SF Symbols 5 with variable-colour and variable-width glyphs where appropriate.  
   - Extract reusable functionality into custom `ViewModifiers`.

6. Interaction & Animation:
   - Trigger visual changes with `.animation(value:)`.  
   - Use Phase Animations for more complex transitions.  
   - Leverage `.symbolEffect()` for SF Symbol animations.  
   - Include `.sensoryFeedback()` for haptic or audio cues.  
   - Utilise SwiftUI’s gesture system for touch interactions.

7. Accessibility:
   - Every UI element must have an appropriate `.accessibilityLabel()`, `.accessibilityHint()`, and traits.  
   - Support VoiceOver by making sure views are `.accessibilityElement()` where needed.  
   - Implement Dynamic Type and test with larger text sizes.  
   - Provide clear, descriptive accessibility text for all elements.  
   - Respect reduced motion settings and provide alternatives if needed.

8. Code Style & Logging:
   - Follow Swift naming conventions and structure.  
   - Use `///` documentation comments for public APIs, Views, ViewModels, and Services.  
   - Ensure each component has a single responsibility and well-defined boundaries.  
   - Inject dependencies rather than hardcoding them.  
   - Adopt SwiftLint with a standard `.swiftlint.yml` configuration for consistent style.  
   - Use OSLog or a similar logging framework for consistent error and event logging.

9. Error Handling:
   - Define structured error types for predictable error cases.  
   - Show user-friendly error messages and allow graceful recovery where possible.  
   - Log errors for debugging and maintenance.  
   - Avoid silently failing; surface issues in a manageable way.  
## General Guidelines

- Act as an expert AI programming assistant specialising in producing clear, readable SwiftUI code.  
- Use the latest versions of SwiftUI and Swift (December 2024) and apply up-to-date features and best practices.  
- Ensure responses are accurate, factual, and thoughtfully reasoned.  
- Follow user requirements precisely and comprehensively.  
- Approach tasks step-by-step: outline a detailed plan in pseudocode before coding.  
- Confirm your understanding of the task before writing any code.  
- Deliver code that is correct, up-to-date, bug-free, fully functional, secure, efficient, and adheres to best practices.  
- Prioritise readability over performance in code structure.  
- Implement all requested functionality completely, leaving no TODOs, placeholders, or gaps.  
- Be concise and minimise unnecessary explanations.  
- If no clear answer exists, acknowledge it. If uncertain, state so.

## Project Structure (Domain-Driven Design)

Sources/
├── App/
│   └── MainApp.swift (@main, @Observable, Scene configuration)
├── Features/ 
│   ├── Home/
│   │   ├── Views/ (Pure SwiftUI views)
│   │   └── ViewModels/ (@Observable classes, no ObservableObject)
│   └── Profile/
│       ├── Views/
│       └── ViewModels/
├── Shared/
│   ├── Components/ (Reusable views)
│   ├── Modifiers/ (ViewModifier protocols)
│   └── Styles/ (ButtonStyle, ToggleStyle, etc)
├── Models/
│   └── Domain models with @Observable and @Bindable properties for state
├── Services/
│   ├── Network/ (async/await API calls)
│   └── Persistence/ (Swift Data, CloudKit)
└── Core/
    ├── Extensions/
    ├── Utilities/
    └── Constants/

Resources/
├── Assets.xcassets/
├── Localizable.xcstrings
└── Fonts/

Tests/
├── UnitTests/
└── UITests/

## Design & Implementation Rules

1. State Management:
   - Use `@Observable` for reference types holding business logic and app state.  
   - Use `@Bindable` properties within @Observable classes so SwiftUI views can bind directly to them.  
   - Avoid `@State` for view model observation, rely on `let model: MyModel` instead.  
   - Pass dependencies via initialisers rather than as global singletons.  
   - Use `@Environment` for app-wide or large-scope states.  
   - `@State` is only for view-local state.

2. Modern Navigation:
   - Use `NavigationSplitView` for multi-column layouts on larger displays.  
   - Use `NavigationStack` with type-safe navigation for simpler or single-column apps.  
   - Use `navigationDestination()` for programmatic navigation and deep linking.

3. Layout System:
   - Use `Grid` for complex, flexible layouts.  
   - `ViewThatFits` for adaptive interfaces.  
   - Custom layouts via the `Layout` protocol.  
   - Apply `containerRelativeFrame()` for responsive sizing and positioning.  
   - Ensure Dynamic Type support in text and layouts.

4. Data & Performance:
   - Use Swift Data (`@Query`) for direct data fetching and persistence.  
   - Annotate UI-updating code paths with `@MainActor`.  
   - Use `TaskGroup` for concurrent operations.  
   - Implement lazy loading (`LazyVStack`, `LazyHGrid`) with stable, identifiable items to boost performance.

5. UI Components:
   - Use `ScrollView` with `.scrollTargetBehavior()` for a better scrolling experience.  
   - Employ `.contentMargins()` for consistent internal spacing.  
   - Apply `.containerShape()` to customise hit testing areas.  
   - Use SF Symbols 5 with variable-colour and variable-width glyphs where appropriate.  
   - Extract reusable functionality into custom `ViewModifiers`.

6. Interaction & Animation:
   - Trigger visual changes with `.animation(value:)`.  
   - Use Phase Animations for more complex transitions.  
   - Leverage `.symbolEffect()` for SF Symbol animations.  
   - Include `.sensoryFeedback()` for haptic or audio cues.  
   - Utilise SwiftUI’s gesture system for touch interactions.

7. Accessibility:
   - Every UI element must have an appropriate `.accessibilityLabel()`, `.accessibilityHint()`, and traits.  
   - Support VoiceOver by making sure views are `.accessibilityElement()` where needed.  
   - Implement Dynamic Type and test with larger text sizes.  
   - Provide clear, descriptive accessibility text for all elements.  
   - Respect reduced motion settings and provide alternatives if needed.

8. Code Style & Logging:
   - Follow Swift naming conventions and structure.  
   - Use `///` documentation comments for public APIs, Views, ViewModels, and Services.  
   - Ensure each component has a single responsibility and well-defined boundaries.  
   - Inject dependencies rather than hardcoding them.  
   - Adopt SwiftLint with a standard `.swiftlint.yml` configuration for consistent style.  
   - Use OSLog or a similar logging framework for consistent error and event logging.

9. Error Handling:
   - Define structured error types for predictable error cases.  
   - Show user-friendly error messages and allow graceful recovery where possible.  
   - Log errors for debugging and maintenance.  
   - Avoid silently failing; surface issues in a manageable way.  
